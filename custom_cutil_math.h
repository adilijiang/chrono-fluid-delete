/*
 * Old classic cutil_math customized for the type real_, which can be
 * float or double
 * Generated by Arman Pazouki
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */

#ifndef CUSTOM_CUTIL_MATH_H
#define CUSTOM_CUTIL_MATH_H
////////Define Real, either float or double
#include <helper_math.h>
#define DOUBLEPRECISION true

#if DOUBLEPRECISION
typedef double real_;
#else
typedef float real_;
#endif

struct real2 {
	real_ x;
	real_ y;
};
struct real3 {
	real_ x;
	real_ y;
	real_ z;
};
struct real4 {
	real_ x;
	real_ y;
	real_ z;
	real_ w;
};

__host__ __device__ inline real_ rminr(real_ a, real_ b)
{
  return a < b ? a : b;
}

__host__ __device__ inline real_ rmaxr(real_ a, real_ b)
{
  return a > b ? a : b;
}

__host__ __device__ inline real_ rsqrtr(real_ x)
{
    return 1.0 / sqrt(x);
}

__host__ __device__ inline real2 make_real2(real_ b, real_ c) ///
{
	real2 a;
	a.x = b;
	a.y = c;
	return a;
}
__host__ __device__ inline real2 make_real2(real_ s)
{
    return make_real2(s, s);
}
__host__ __device__ inline real2 make_real2(real3 a)
{
    return make_real2(a.x, a.y);
}
__host__ __device__ inline real2 make_real2(int2 a)
{
    return make_real2(real_(a.x), real_(a.y));
}
__host__ __device__ inline real2 make_real2(uint2 a)
{
    return make_real2(real_(a.x), real_(a.y));
}

__host__ __device__ inline int2 make_int2(real2 a)
{
    return make_int2(int(a.x), int(a.y));
}

__host__ __device__ inline real3 make_real3(real_ a, real_ b, real_ c) ///
{
	real3 d;
	d.x = a;
	d.y = b;
	d.z = c;
	return d;
}
__host__ __device__ inline real3 make_real3(real_ s)
{
    return make_real3(s, s, s);
}
__host__ __device__ inline real3 make_real3(real2 a)
{
    return make_real3(a.x, a.y, 0.0);
}
__host__ __device__ inline real3 make_real3(real2 a, real_ s)
{
    return make_real3(a.x, a.y, s);
}
__host__ __device__ inline real3 make_real3(real4 a)
{
    return make_real3(a.x, a.y, a.z);
}
__host__ __device__ inline real3 make_real3(int3 a)
{
    return make_real3(real_(a.x), real_(a.y), real_(a.z));
}
__host__ __device__ inline real3 make_real3(uint3 a)
{
    return make_real3(real_(a.x), real_(a.y), real_(a.z));
}

__host__ __device__ inline int3 make_int3(real3 a)
{
    return make_int3(int(a.x), int(a.y), int(a.z));
}

__host__ __device__ inline real4 make_real4(real_ a, real_ b, real_ c, real_ d) ///
{
	real4 e;
	e.x = a;
	e.y = b;
	e.z = c;
	e.w = d;
	return e;
}
__host__ __device__ inline real4 make_real4(real_ s)
{
    return make_real4(s, s, s, s);
}
__host__ __device__ inline real4 make_real4(real3 a)
{
    return make_real4(a.x, a.y, a.z, 0.0);
}
__host__ __device__ inline real4 make_real4(real3 a, real_ w)
{
    return make_real4(a.x, a.y, a.z, w);
}
__host__ __device__ inline real4 make_real4(int4 a)
{
    return make_real4(real_(a.x), real_(a.y), real_(a.z), real_(a.w));
}
__host__ __device__ inline real4 make_real4(uint4 a)
{
    return make_real4(real_(a.x), real_(a.y), real_(a.z), real_(a.w));
}

__host__ __device__ inline int4 make_int4(real4 a)
{
    return make_int4(int(a.x), int(a.y), int(a.z), int(a.w));
}

__host__ __device__ inline real2 operator-(real2 &a)
{
    return make_real2(-a.x, -a.y);
}

__host__ __device__ inline real3 operator-(real3 &a)
{
    return make_real3(-a.x, -a.y, -a.z);
}

__host__ __device__ inline real4 operator-(real4 &a)
{
    return make_real4(-a.x, -a.y, -a.z, -a.w);
}

__host__ __device__ inline real2 operator+(real2 a, real2 b)
{
    return make_real2(a.x + b.x, a.y + b.y);
}
__host__ __device__ inline void operator+=(real2 &a, real2 b)
{
    a.x += b.x; a.y += b.y;
}
__host__ __device__ inline real2 operator+(real2 a, real_ b)
{
    return make_real2(a.x + b, a.y + b);
}
__host__ __device__ inline real2 operator+(real_ b, real2 a)
{
    return make_real2(a.x + b, a.y + b);
}
__host__ __device__ inline void operator+=(real2 &a, real_ b)
{
    a.x += b; a.y += b;
}

__host__ __device__ inline real3 operator+(real3 a, real3 b)
{
    return make_real3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__host__ __device__ inline void operator+=(real3 &a, real3 b)
{
    a.x += b.x; a.y += b.y; a.z += b.z;
}
__host__ __device__ inline real3 operator+(real3 a, real_ b)
{
    return make_real3(a.x + b, a.y + b, a.z + b);
}
__host__ __device__ inline void operator+=(real3 &a, real_ b)
{
    a.x += b; a.y += b; a.z += b;
}

__host__ __device__ inline real3 operator+(real_ b, real3 a)
{
    return make_real3(a.x + b, a.y + b, a.z + b);
}

__host__ __device__ inline real4 operator+(real4 a, real4 b)
{
    return make_real4(a.x + b.x, a.y + b.y, a.z + b.z,  a.w + b.w);
}
__host__ __device__ inline void operator+=(real4 &a, real4 b)
{
    a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w;
}
__host__ __device__ inline real4 operator+(real4 a, real_ b)
{
    return make_real4(a.x + b, a.y + b, a.z + b, a.w + b);
}
__host__ __device__ inline real4 operator+(real_ b, real4 a)
{
    return make_real4(a.x + b, a.y + b, a.z + b, a.w + b);
}
__host__ __device__ inline void operator+=(real4 &a, real_ b)
{
    a.x += b; a.y += b; a.z += b; a.w += b;
}

__host__ __device__ inline real2 operator-(real2 a, real2 b)
{
    return make_real2(a.x - b.x, a.y - b.y);
}
__host__ __device__ inline void operator-=(real2 &a, real2 b)
{
    a.x -= b.x; a.y -= b.y;
}
__host__ __device__ inline real2 operator-(real2 a, real_ b)
{
    return make_real2(a.x - b, a.y - b);
}
__host__ __device__ inline real2 operator-(real_ b, real2 a)
{
    return make_real2(b - a.x, b - a.y);
}
__host__ __device__ inline void operator-=(real2 &a, real_ b)
{
    a.x -= b; a.y -= b;
}

__host__ __device__ inline real3 operator-(real3 a, real3 b)
{
    return make_real3(a.x - b.x, a.y - b.y, a.z - b.z);
}
__host__ __device__ inline void operator-=(real3 &a, real3 b)
{
    a.x -= b.x; a.y -= b.y; a.z -= b.z;
}
__host__ __device__ inline real3 operator-(real3 a, real_ b)
{
    return make_real3(a.x - b, a.y - b, a.z - b);
}
__host__ __device__ inline real3 operator-(real_ b, real3 a)
{
    return make_real3(b - a.x, b - a.y, b - a.z);
}
__host__ __device__ inline void operator-=(real3 &a, real_ b)
{
    a.x -= b; a.y -= b; a.z -= b;
}

__host__ __device__ inline real4 operator-(real4 a, real4 b)
{
    return make_real4(a.x - b.x, a.y - b.y, a.z - b.z,  a.w - b.w);
}
__host__ __device__ inline void operator-=(real4 &a, real4 b)
{
    a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w;
}
__host__ __device__ inline real4 operator-(real4 a, real_ b)
{
    return make_real4(a.x - b, a.y - b, a.z - b,  a.w - b);
}
__host__ __device__ inline void operator-=(real4 &a, real_ b)
{
    a.x -= b; a.y -= b; a.z -= b; a.w -= b;
}

__host__ __device__ inline real2 operator*(real2 a, real2 b)
{
    return make_real2(a.x * b.x, a.y * b.y);
}
__host__ __device__ inline void operator*=(real2 &a, real2 b)
{
    a.x *= b.x; a.y *= b.y;
}
__host__ __device__ inline real2 operator*(real2 a, real_ b)
{
    return make_real2(a.x * b, a.y * b);
}
__host__ __device__ inline real2 operator*(real_ b, real2 a)
{
    return make_real2(b * a.x, b * a.y);
}
__host__ __device__ inline void operator*=(real2 &a, real_ b)
{
    a.x *= b; a.y *= b;
}

__host__ __device__ inline real3 operator*(real3 a, real3 b)
{
    return make_real3(a.x * b.x, a.y * b.y, a.z * b.z);
}
__host__ __device__ inline void operator*=(real3 &a, real3 b)
{
    a.x *= b.x; a.y *= b.y; a.z *= b.z;
}
__host__ __device__ inline real3 operator*(real3 a, real_ b)
{
    return make_real3(a.x * b, a.y * b, a.z * b);
}
__host__ __device__ inline real3 operator*(real_ b, real3 a)
{
    return make_real3(b * a.x, b * a.y, b * a.z);
}
__host__ __device__ inline void operator*=(real3 &a, real_ b)
{
    a.x *= b; a.y *= b; a.z *= b;
}

__host__ __device__ inline real4 operator*(real4 a, real4 b)
{
    return make_real4(a.x * b.x, a.y * b.y, a.z * b.z,  a.w * b.w);
}
__host__ __device__ inline void operator*=(real4 &a, real4 b)
{
    a.x *= b.x; a.y *= b.y; a.z *= b.z; a.w *= b.w;
}
__host__ __device__ inline real4 operator*(real4 a, real_ b)
{
    return make_real4(a.x * b, a.y * b, a.z * b,  a.w * b);
}
__host__ __device__ inline real4 operator*(real_ b, real4 a)
{
    return make_real4(b * a.x, b * a.y, b * a.z, b * a.w);
}
__host__ __device__ inline void operator*=(real4 &a, real_ b)
{
    a.x *= b; a.y *= b; a.z *= b; a.w *= b;
}

__host__ __device__ inline real2 operator/(real2 a, real2 b)
{
    return make_real2(a.x / b.x, a.y / b.y);
}
__host__ __device__ inline void operator/=(real2 &a, real2 b)
{
    a.x /= b.x; a.y /= b.y;
}
__host__ __device__ inline real2 operator/(real2 a, real_ b)
{
    return make_real2(a.x / b, a.y / b);
}
__host__ __device__ inline void operator/=(real2 &a, real_ b)
{
    a.x /= b; a.y /= b;
}
__host__ __device__ inline real2 operator/(real_ b, real2 a)
{
    return make_real2(b / a.x, b / a.y);
}

__host__ __device__ inline real3 operator/(real3 a, real3 b)
{
    return make_real3(a.x / b.x, a.y / b.y, a.z / b.z);
}
__host__ __device__ inline void operator/=(real3 &a, real3 b)
{
    a.x /= b.x; a.y /= b.y; a.z /= b.z;
}
__host__ __device__ inline real3 operator/(real3 a, real_ b)
{
    return make_real3(a.x / b, a.y / b, a.z / b);
}
__host__ __device__ inline void operator/=(real3 &a, real_ b)
{
    a.x /= b; a.y /= b; a.z /= b;
}
__host__ __device__ inline real3 operator/(real_ b, real3 a)
{
    return make_real3(b / a.x, b / a.y, b / a.z);
}

__host__ __device__ inline real4 operator/(real4 a, real4 b)
{
    return make_real4(a.x / b.x, a.y / b.y, a.z / b.z,  a.w / b.w);
}
__host__ __device__ inline void operator/=(real4 &a, real4 b)
{
    a.x /= b.x; a.y /= b.y; a.z /= b.z; a.w /= b.w;
}
__host__ __device__ inline real4 operator/(real4 a, real_ b)
{
    return make_real4(a.x / b, a.y / b, a.z / b,  a.w / b);
}
__host__ __device__ inline void operator/=(real4 &a, real_ b)
{
    a.x /= b; a.y /= b; a.z /= b; a.w /= b;
}
__host__ __device__ inline real4 operator/(real_ b, real4 a){
    return make_real4(b / a.x, b / a.y, b / a.z, b / a.w);
}

__host__ __device__ inline  real2 rminr(real2 a, real2 b)
{
	return make_real2(rminr(a.x,b.x), rminr(a.y,b.y));
}
__host__ __device__ inline real3 rminr(real3 a, real3 b)
{
	return make_real3(rminr(a.x,b.x), rminr(a.y,b.y), rminr(a.z,b.z));
}
__host__ __device__ inline  real4 rminr(real4 a, real4 b)
{
	return make_real4(rminr(a.x,b.x), rminr(a.y,b.y), rminr(a.z,b.z), rminr(a.w,b.w));
}

__host__ __device__ inline real2 rmaxr(real2 a, real2 b)
{
	return make_real2(rmaxr(a.x,b.x), rmaxr(a.y,b.y));
}
__host__ __device__ inline real3 rmaxr(real3 a, real3 b)
{
	return make_real3(rmaxr(a.x,b.x), rmaxr(a.y,b.y), rmaxr(a.z,b.z));
}
__host__ __device__ inline real4 rmaxr(real4 a, real4 b)
{
	return make_real4(rmaxr(a.x,b.x), rmaxr(a.y,b.y), rmaxr(a.z,b.z), rmaxr(a.w,b.w));
}

#if DOUBLEPRECISION
__host__ __device__ inline real_ lerp(real_ a, real_ b, real_ t)
{
    return a + t*(b-a);
}
#endif

__host__ __device__ inline real2 lerp(real2 a, real2 b, real_ t)
{
    return a + t*(b-a);
}
__host__ __device__ inline real3 lerp(real3 a, real3 b, real_ t)
{
    return a + t*(b-a);
}
__host__ __device__ inline real4 lerp(real4 a, real4 b, real_ t)
{
    return a + t*(b-a);
}

#if DOUBLEPRECISION
__host__ __device__ inline real_ clamp(real_ f, real_ a, real_ b)
{
    return rmaxr(a, rminr(f, b));
}
#endif
__host__ __device__ inline real2 clamp(real2 v, real_ a, real_ b)
{
    return make_real2(clamp(v.x, a, b), clamp(v.y, a, b));
}
__host__ __device__ inline real2 clamp(real2 v, real2 a, real2 b)
{
    return make_real2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}
__host__ __device__ inline real3 clamp(real3 v, real_ a, real_ b)
{
    return make_real3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}
__host__ __device__ inline real3 clamp(real3 v, real3 a, real3 b)
{
    return make_real3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z));
}
__host__ __device__ inline real4 clamp(real4 v, real_ a, real_ b)
{
    return make_real4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b), clamp(v.w, a, b));
}
__host__ __device__ inline real4 clamp(real4 v, real4 a, real4 b)
{
    return make_real4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}

__host__ __device__ inline real_ dot(real2 a, real2 b)
{ 
    return a.x * b.x + a.y * b.y;
}
__host__ __device__ inline real_ dot(real3 a, real3 b)
{ 
    return a.x * b.x + a.y * b.y + a.z * b.z;
}
__host__ __device__ inline real_ dot(real4 a, real4 b)
{ 
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

__host__ __device__ inline real_ length(real2 v)
{
    return sqrt(dot(v, v));
}
__host__ __device__ inline real_ length(real3 v)
{
    return sqrt(dot(v, v));
}
__host__ __device__ inline real_ length(real4 v)
{
    return sqrt(dot(v, v));
}

__host__ __device__ inline real2 normalize(real2 v)
{
    real_ invLen = rsqrtr(dot(v, v));
    return v * invLen;
}
__host__ __device__ inline real3 normalize(real3 v)
{
    real_ invLen = rsqrtr(dot(v, v));
    return v * invLen;
}
__host__ __device__ inline real4 normalize(real4 v)
{
    real_ invLen = rsqrtr(dot(v, v));
    return v * invLen;
}

__host__ __device__ inline real2 floor(real2 v)
{
    return make_real2(floor(v.x), floor(v.y));
}
__host__ __device__ inline real3 floor(real3 v)
{
    return make_real3(floor(v.x), floor(v.y), floor(v.z));
}
__host__ __device__ inline real4 floor(real4 v)
{
    return make_real4(floor(v.x), floor(v.y), floor(v.z), floor(v.w));
}

__host__ __device__ inline real_ fracr(real_ v)
{
    return v - floor(v);
}
__host__ __device__ inline real2 fracr(real2 v)
{
    return make_real2(fracr(v.x), fracr(v.y));
}
__host__ __device__ inline real3 fracr(real3 v)
{
    return make_real3(fracr(v.x), fracr(v.y), fracr(v.z));
}
__host__ __device__ inline real4 fracr(real4 v)
{
    return make_real4(fracr(v.x), fracr(v.y), fracr(v.z), fracr(v.w));
}

__host__ __device__ inline real_ rmodr(real_ a, real_ b)
{
	return fmod(a,b);
}
__host__ __device__ inline real2 rmodr(real2 a, real2 b)
{
    return make_real2(rmodr(a.x, b.x), rmodr(a.y, b.y));
}
__host__ __device__ inline real3 rmodr(real3 a, real3 b)
{
    return make_real3(rmodr(a.x, b.x), rmodr(a.y, b.y), rmodr(a.z, b.z));
}
__host__ __device__ inline real4 rmodr(real4 a, real4 b)
{
    return make_real4(rmodr(a.x, b.x), rmodr(a.y, b.y), rmodr(a.z, b.z), rmodr(a.w, b.w));
}

__host__ __device__ inline real2 abs(real2 v)
{
	return make_real2(abs(v.x), abs(v.y));
}
__host__ __device__ inline real3 abs(real3 v)
{
	return make_real3(abs(v.x), abs(v.y), abs(v.z));
}
__host__ __device__ inline real4 abs(real4 v)
{
	return make_real4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
}

__host__ __device__ inline real3 reflect(real3 i, real3 n)
{
	return i - 2.0 * n * dot(n,i);
}

__host__ __device__ inline real3 cross(real3 a, real3 b)
{ 
    return make_real3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
}

#if DOUBLEPRECISION
__host__ __device__ inline real_ smoothstep(real_ a, real_ b, real_ x)
{
	real_ y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(3.0 - (2.0*y)));
}
#endif
__host__ __device__ inline real2 smoothstep(real2 a, real2 b, real2 x)
{
	real2 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_real2(3.0) - (make_real2(2.0)*y)));
}
__host__ __device__ inline real3 smoothstep(real3 a, real3 b, real3 x)
{
	real3 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_real3(3.0) - (make_real3(2.0)*y)));
}
__host__ __device__ inline real4 smoothstep(real4 a, real4 b, real4 x)
{
	real4 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_real4(3.0) - (make_real4(2.0)*y)));
}
//**** some other useful operators
__host__ __device__ inline bool operator== (const int2 & a , const int2 & b){
	return (a.x==b.x&&a.y==b.y);
}

#endif
